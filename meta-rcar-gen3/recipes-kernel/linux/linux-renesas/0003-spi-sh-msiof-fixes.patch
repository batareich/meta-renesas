From 32db8cc989d7dfdf0315d286b06234e008e56d7c Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Sun, 15 May 2016 21:53:13 +0300
Subject: [PATCH] spi: sh-msiof: fixes

1) fix incorrect udelay caused by overriding HZ constant
udelay uses HZ for constants at compile time.

2) speed up polling of CTR register

3) request gpios for 'cs-gpios'
The 'cs-gpio' feature needs gpio_request in spi glue driver

Signed-off-by: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
---
 drivers/spi/spi-sh-msiof.c | 30 ++++++++++++++++++++----------
 1 file changed, 20 insertions(+), 10 deletions(-)

diff --git a/drivers/spi/spi-sh-msiof.c b/drivers/spi/spi-sh-msiof.c
index d096f5a..6817304 100644
--- a/drivers/spi/spi-sh-msiof.c
+++ b/drivers/spi/spi-sh-msiof.c
@@ -25,6 +25,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
+#include <linux/of_gpio.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
 #include <linux/sh_dma.h>
@@ -35,8 +36,7 @@
 
 #include <asm/unaligned.h>
 
-#undef HZ
-#define HZ MAX_SCHEDULE_TIMEOUT
+#define HZ_MSIOF MAX_SCHEDULE_TIMEOUT
 
 struct sh_msiof_chipdata {
 	u16 tx_fifo_size;
@@ -228,11 +228,11 @@ static int sh_msiof_modify_ctr_wait(struct sh_msiof_spi_priv *p,
 	data |= set;
 	sh_msiof_write(p, CTR, data);
 
-	for (k = 100; k > 0; k--) {
+	for (k = 1000; k > 0; k--) {
 		if ((sh_msiof_read(p, CTR) & mask) == set)
 			break;
 
-		udelay(10);
+		udelay(1);
 	}
 
 	return k > 0 ? 0 : -ETIMEDOUT;
@@ -584,8 +584,7 @@ static int sh_msiof_spi_setup(struct spi_device *spi)
 				  !!(spi->mode & SPI_CS_HIGH));
 
 	if (spi->cs_gpio >= 0)
-		gpio_set_value(spi->cs_gpio, !(spi->mode & SPI_CS_HIGH));
-
+		gpio_direction_output(spi->cs_gpio, !(spi->mode & SPI_CS_HIGH));
 
 	pm_runtime_put(&p->pdev->dev);
 
@@ -683,7 +682,7 @@ static int sh_msiof_spi_txrx_once(struct sh_msiof_spi_priv *p,
 	}
 
 	/* wait for tx fifo to be emptied / rx fifo to be filled */
-	if (!wait_for_completion_timeout(&p->done, HZ)) {
+	if (!wait_for_completion_timeout(&p->done, HZ_MSIOF)) {
 		dev_err(&p->pdev->dev, "PIO timeout\n");
 		ret = -ETIMEDOUT;
 		goto stop_reset;
@@ -797,7 +796,7 @@ static int sh_msiof_dma_once(struct sh_msiof_spi_priv *p, const void *tx,
 
 	/* wait for Tx/Rx DMA completion */
 	if (tx) {
-		ret = wait_for_completion_timeout(&p->done_dma_tx, HZ);
+		ret = wait_for_completion_timeout(&p->done_dma_tx, HZ_MSIOF);
 		if (!ret) {
 			dev_err(&p->pdev->dev, "Tx DMA timeout\n");
 			ret = -ETIMEDOUT;
@@ -808,7 +807,7 @@ static int sh_msiof_dma_once(struct sh_msiof_spi_priv *p, const void *tx,
 			sh_msiof_write(p, IER, ier_bits);
 
 			/* wait for tx fifo to be emptied */
-			if (!wait_for_completion_timeout(&p->done, HZ)) {
+			if (!wait_for_completion_timeout(&p->done, HZ_MSIOF)) {
 				dev_err(&p->pdev->dev,
 					"Tx fifo to be emptied timeout\n");
 				ret = -ETIMEDOUT;
@@ -817,7 +816,7 @@ static int sh_msiof_dma_once(struct sh_msiof_spi_priv *p, const void *tx,
 		}
 	}
 	if (rx) {
-		ret = wait_for_completion_timeout(&p->done_dma_rx, HZ);
+		ret = wait_for_completion_timeout(&p->done_dma_rx, HZ_MSIOF);
 		if (!ret) {
 			dev_err(&p->pdev->dev, "Rx DMA timeout\n");
 			ret = -ETIMEDOUT;
@@ -1079,6 +1078,7 @@ static struct sh_msiof_spi_info *sh_msiof_spi_parse_dt(struct device *dev)
 	struct sh_msiof_spi_info *info;
 	struct device_node *np = dev->of_node;
 	u32 num_cs = 1;
+	int i;
 
 	info = devm_kzalloc(dev, sizeof(struct sh_msiof_spi_info), GFP_KERNEL);
 	if (!info)
@@ -1100,6 +1100,16 @@ static struct sh_msiof_spi_info *sh_msiof_spi_parse_dt(struct device *dev)
 
 	info->num_chipselect = num_cs;
 
+	for (i = 0; i < num_cs; i++) {
+		int cs_gpio = of_get_named_gpio(np, "cs-gpios", i);
+
+		if (gpio_is_valid(cs_gpio)) {
+			if (devm_gpio_request(dev, cs_gpio, "msiof-cs-gpio")) {
+				dev_err(dev, "Can't get CS GPIO %i\n", i);
+				return NULL;
+			}
+		}
+	}
 	return info;
 }
 #else
-- 
1.9.1

